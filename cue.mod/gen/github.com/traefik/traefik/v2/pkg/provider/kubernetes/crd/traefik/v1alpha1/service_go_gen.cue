// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/traefik/traefik/v2/pkg/config/dynamic"
)

// TraefikService is the CRD implementation of a Traefik Service.
// TraefikService object allows to:
// - Apply weight to Services on load-balancing
// - Mirror traffic on services
// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-traefikservice
#TraefikService: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:     #TraefikServiceSpec @go(Spec)
}

// TraefikServiceList is a collection of TraefikService resources.
#TraefikServiceList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of TraefikService.
	items: [...#TraefikService] @go(Items,[]TraefikService)
}

// TraefikServiceSpec defines the desired state of a TraefikService.
#TraefikServiceSpec: {
	// Weighted defines the Weighted Round Robin configuration.
	weighted?: null | #WeightedRoundRobin @go(Weighted,*WeightedRoundRobin)

	// Mirroring defines the Mirroring service configuration.
	mirroring?: null | #Mirroring @go(Mirroring,*Mirroring)
}

// Mirroring holds the mirroring service configuration.
// More info: https://doc.traefik.io/traefik/v2.9/routing/services/#mirroring-service
#Mirroring: {
	#LoadBalancerSpec

	// MaxBodySize defines the maximum size allowed for the body of the request.
	// If the body is larger, the request is not mirrored.
	// Default value is -1, which means unlimited size.
	maxBodySize?: null | int64 @go(MaxBodySize,*int64)

	// Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
	mirrors?: [...#MirrorService] @go(Mirrors,[]MirrorService)
}

// MirrorService holds the mirror configuration.
#MirrorService: {
	#LoadBalancerSpec

	// Percent defines the part of the traffic to mirror.
	// Supported values: 0 to 100.
	percent?: int @go(Percent)
}

// WeightedRoundRobin holds the weighted round-robin configuration.
// More info: https://doc.traefik.io/traefik/v2.9/routing/services/#weighted-round-robin-service
#WeightedRoundRobin: {
	// Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
	services?: [...#Service] @go(Services,[]Service)

	// Sticky defines whether sticky sessions are enabled.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
	sticky?: null | dynamic.#Sticky @go(Sticky,*dynamic.Sticky)
}
