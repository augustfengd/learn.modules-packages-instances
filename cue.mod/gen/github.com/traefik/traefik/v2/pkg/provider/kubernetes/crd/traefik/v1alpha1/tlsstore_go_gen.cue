// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/traefik/traefik/v2/pkg/tls"
)

// TLSStore is the CRD implementation of a Traefik TLS Store.
// For the time being, only the TLSStore named default is supported.
// This means that you cannot have two stores that are named default in different Kubernetes namespaces.
// More info: https://doc.traefik.io/traefik/v2.9/https/tls/#certificates-stores
#TLSStore: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta @go(ObjectMeta)
	spec:     #TLSStoreSpec      @go(Spec)
}

// TLSStoreSpec defines the desired state of a TLSStore.
#TLSStoreSpec: {
	// DefaultCertificate defines the default certificate configuration.
	defaultCertificate?: null | #Certificate @go(DefaultCertificate,*Certificate)

	// DefaultGeneratedCert defines the default generated certificate configuration.
	defaultGeneratedCert?: null | tls.#GeneratedCert @go(DefaultGeneratedCert,*tls.GeneratedCert)

	// Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
	certificates?: [...#Certificate] @go(Certificates,[]Certificate)
}

// Certificate holds a secret name for the TLSStore resource.
#Certificate: {
	// SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
	secretName: string @go(SecretName)
}

// TLSStoreList is a collection of TLSStore resources.
#TLSStoreList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of TLSStore.
	items: [...#TLSStore] @go(Items,[]TLSStore)
}
