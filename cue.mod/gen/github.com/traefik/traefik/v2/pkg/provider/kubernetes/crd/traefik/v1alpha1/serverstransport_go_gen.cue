// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// ServersTransport is the CRD implementation of a ServersTransport.
// If no serversTransport is specified, the default@internal will be used.
// The default@internal serversTransport is created from the static configuration.
// More info: https://doc.traefik.io/traefik/v2.9/routing/services/#serverstransport_1
#ServersTransport: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:     #ServersTransportSpec @go(Spec)
}

// ServersTransportSpec defines the desired state of a ServersTransport.
#ServersTransportSpec: {
	// ServerName defines the server name used to contact the server.
	serverName?: string @go(ServerName)

	// InsecureSkipVerify disables SSL certificate verification.
	insecureSkipVerify?: bool @go(InsecureSkipVerify)

	// RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
	rootCAsSecrets?: [...string] @go(RootCAsSecrets,[]string)

	// CertificatesSecrets defines a list of secret storing client certificates for mTLS.
	certificatesSecrets?: [...string] @go(CertificatesSecrets,[]string)

	// MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
	maxIdleConnsPerHost?: int @go(MaxIdleConnsPerHost)

	// ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
	forwardingTimeouts?: null | #ForwardingTimeouts @go(ForwardingTimeouts,*ForwardingTimeouts)

	// DisableHTTP2 disables HTTP/2 for connections with backend servers.
	disableHTTP2?: bool @go(DisableHTTP2)

	// PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
	peerCertURI?: string @go(PeerCertURI)
}

// ForwardingTimeouts holds the timeout configurations for forwarding requests to the backend servers.
#ForwardingTimeouts: {
	// DialTimeout is the amount of time to wait until a connection to a backend server can be established.
	dialTimeout?: null | intstr.#IntOrString @go(DialTimeout,*intstr.IntOrString)

	// ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
	responseHeaderTimeout?: null | intstr.#IntOrString @go(ResponseHeaderTimeout,*intstr.IntOrString)

	// IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
	idleConnTimeout?: null | intstr.#IntOrString @go(IdleConnTimeout,*intstr.IntOrString)

	// ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
	readIdleTimeout?: null | intstr.#IntOrString @go(ReadIdleTimeout,*intstr.IntOrString)

	// PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
	pingTimeout?: null | intstr.#IntOrString @go(PingTimeout,*intstr.IntOrString)
}

// ServersTransportList is a collection of ServersTransport resources.
#ServersTransportList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of ServersTransport.
	items: [...#ServersTransport] @go(Items,[]ServersTransport)
}
