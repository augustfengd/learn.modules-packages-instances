// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/traefik/traefik/v2/pkg/config/dynamic"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// Middleware is the CRD implementation of a Traefik Middleware.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/overview/
#Middleware: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta @go(ObjectMeta)
	spec:     #MiddlewareSpec    @go(Spec)
}

// MiddlewareSpec defines the desired state of a Middleware.
#MiddlewareSpec: {
	addPrefix?:         null | dynamic.#AddPrefix         @go(AddPrefix,*dynamic.AddPrefix)
	stripPrefix?:       null | dynamic.#StripPrefix       @go(StripPrefix,*dynamic.StripPrefix)
	stripPrefixRegex?:  null | dynamic.#StripPrefixRegex  @go(StripPrefixRegex,*dynamic.StripPrefixRegex)
	replacePath?:       null | dynamic.#ReplacePath       @go(ReplacePath,*dynamic.ReplacePath)
	replacePathRegex?:  null | dynamic.#ReplacePathRegex  @go(ReplacePathRegex,*dynamic.ReplacePathRegex)
	chain?:             null | #Chain                     @go(Chain,*Chain)
	ipWhiteList?:       null | dynamic.#IPWhiteList       @go(IPWhiteList,*dynamic.IPWhiteList)
	headers?:           null | dynamic.#Headers           @go(Headers,*dynamic.Headers)
	errors?:            null | #ErrorPage                 @go(Errors,*ErrorPage)
	rateLimit?:         null | #RateLimit                 @go(RateLimit,*RateLimit)
	redirectRegex?:     null | dynamic.#RedirectRegex     @go(RedirectRegex,*dynamic.RedirectRegex)
	redirectScheme?:    null | dynamic.#RedirectScheme    @go(RedirectScheme,*dynamic.RedirectScheme)
	basicAuth?:         null | #BasicAuth                 @go(BasicAuth,*BasicAuth)
	digestAuth?:        null | #DigestAuth                @go(DigestAuth,*DigestAuth)
	forwardAuth?:       null | #ForwardAuth               @go(ForwardAuth,*ForwardAuth)
	inFlightReq?:       null | dynamic.#InFlightReq       @go(InFlightReq,*dynamic.InFlightReq)
	buffering?:         null | dynamic.#Buffering         @go(Buffering,*dynamic.Buffering)
	circuitBreaker?:    null | #CircuitBreaker            @go(CircuitBreaker,*CircuitBreaker)
	compress?:          null | dynamic.#Compress          @go(Compress,*dynamic.Compress)
	passTLSClientCert?: null | dynamic.#PassTLSClientCert @go(PassTLSClientCert,*dynamic.PassTLSClientCert)
	retry?:             null | #Retry                     @go(Retry,*Retry)
	contentType?:       null | dynamic.#ContentType       @go(ContentType,*dynamic.ContentType)
}

// ErrorPage holds the custom error middleware configuration.
// This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/
#ErrorPage: {
	// Status defines which status or range of statuses should result in an error page.
	// It can be either a status code as a number (500),
	// as multiple comma-separated numbers (500,502),
	// as ranges by separating two codes with a dash (500-599),
	// or a combination of the two (404,418,500-599).
	status?: [...string] @go(Status,[]string)

	// Service defines the reference to a Kubernetes Service that will serve the error page.
	// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/errorpages/#service
	service?: #Service @go(Service)

	// Query defines the URL for the error page (hosted by service).
	// The {status} variable can be used in order to insert the status code in the URL.
	query?: string @go(Query)
}

// CircuitBreaker holds the circuit breaker configuration.
#CircuitBreaker: {
	// Expression is the condition that triggers the tripped state.
	expression?: string @go(Expression) @toml(expression,omitempty)

	// CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
	checkPeriod?: null | intstr.#IntOrString @go(CheckPeriod,*intstr.IntOrString) @toml(checkPeriod,omitempty)

	// FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
	fallbackDuration?: null | intstr.#IntOrString @go(FallbackDuration,*intstr.IntOrString) @toml(fallbackDuration,omitempty)

	// RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
	recoveryDuration?: null | intstr.#IntOrString @go(RecoveryDuration,*intstr.IntOrString) @toml(recoveryDuration,omitempty)
}

// Chain holds the configuration of the chain middleware.
// This middleware enables to define reusable combinations of other pieces of middleware.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/chain/
#Chain: {
	// Middlewares is the list of MiddlewareRef which composes the chain.
	middlewares?: [...#MiddlewareRef] @go(Middlewares,[]MiddlewareRef)
}

// BasicAuth holds the basic auth middleware configuration.
// This middleware restricts access to your services to known users.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/
#BasicAuth: {
	// Secret is the name of the referenced Kubernetes Secret containing user credentials.
	secret?: string @go(Secret)

	// Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
	// Default: traefik.
	realm?: string @go(Realm)

	// RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
	// Default: false.
	removeHeader?: bool @go(RemoveHeader)

	// HeaderField defines a header field to store the authenticated user.
	// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/#headerfield
	headerField?: string @go(HeaderField)
}

// DigestAuth holds the digest auth middleware configuration.
// This middleware restricts access to your services to known users.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/digestauth/
#DigestAuth: {
	// Secret is the name of the referenced Kubernetes Secret containing user credentials.
	secret?: string @go(Secret)

	// RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
	removeHeader?: bool @go(RemoveHeader)

	// Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
	// Default: traefik.
	realm?: string @go(Realm)

	// HeaderField defines a header field to store the authenticated user.
	// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/basicauth/#headerfield
	headerField?: string @go(HeaderField)
}

// ForwardAuth holds the forward auth middleware configuration.
// This middleware delegates the request authentication to a Service.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/forwardauth/
#ForwardAuth: {
	// Address defines the authentication server address.
	address?: string @go(Address)

	// TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
	trustForwardHeader?: bool @go(TrustForwardHeader)

	// AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
	authResponseHeaders?: [...string] @go(AuthResponseHeaders,[]string)

	// AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
	// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/forwardauth/#authresponseheadersregex
	authResponseHeadersRegex?: string @go(AuthResponseHeadersRegex)

	// AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
	// If not set or empty then all request headers are passed.
	authRequestHeaders?: [...string] @go(AuthRequestHeaders,[]string)

	// TLS defines the configuration used to secure the connection to the authentication server.
	tls?: null | #ClientTLS @go(TLS,*ClientTLS)
}

// ClientTLS holds the client TLS configuration.
#ClientTLS: {
	// CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
	// The CA certificate is extracted from key `tls.ca` or `ca.crt`.
	caSecret?: string @go(CASecret)

	// CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
	// The client certificate is extracted from the keys `tls.crt` and `tls.key`.
	certSecret?: string @go(CertSecret)

	// InsecureSkipVerify defines whether the server certificates should be validated.
	insecureSkipVerify?: bool @go(InsecureSkipVerify)
	caOptional?:         bool @go(CAOptional)
}

// RateLimit holds the rate limit configuration.
// This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/ratelimit/
#RateLimit: {
	// Average is the maximum rate, by default in requests/s, allowed for the given source.
	// It defaults to 0, which means no rate limiting.
	// The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
	// one needs to define a Period larger than a second.
	average?: int64 @go(Average)

	// Period, in combination with Average, defines the actual maximum rate, such as:
	// r = Average / Period. It defaults to a second.
	period?: null | intstr.#IntOrString @go(Period,*intstr.IntOrString)

	// Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
	// It defaults to 1.
	burst?: null | int64 @go(Burst,*int64)

	// SourceCriterion defines what criterion is used to group requests as originating from a common source.
	// If several strategies are defined at the same time, an error will be raised.
	// If none are set, the default is to use the request's remote address field (as an ipStrategy).
	sourceCriterion?: null | dynamic.#SourceCriterion @go(SourceCriterion,*dynamic.SourceCriterion)
}

// Retry holds the retry middleware configuration.
// This middleware reissues requests a given number of times to a backend server if that server does not reply.
// As soon as the server answers, the middleware stops retrying, regardless of the response status.
// More info: https://doc.traefik.io/traefik/v2.9/middlewares/http/retry/
#Retry: {
	// Attempts defines how many times the request should be retried.
	attempts?: int @go(Attempts)

	// InitialInterval defines the first wait time in the exponential backoff series.
	// The maximum interval is calculated as twice the initialInterval.
	// If unspecified, requests will be retried immediately.
	// The value of initialInterval should be provided in seconds or as a valid duration format,
	// see https://pkg.go.dev/time#ParseDuration.
	initialInterval?: intstr.#IntOrString @go(InitialInterval)
}

// MiddlewareList is a collection of Middleware resources.
#MiddlewareList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of Middleware.
	items: [...#Middleware] @go(Items,[]Middleware)
}
