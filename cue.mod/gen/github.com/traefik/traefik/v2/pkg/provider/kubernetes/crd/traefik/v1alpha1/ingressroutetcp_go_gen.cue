// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	"github.com/traefik/traefik/v2/pkg/types"
	"k8s.io/apimachinery/pkg/util/intstr"
	"github.com/traefik/traefik/v2/pkg/config/dynamic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
#IngressRouteTCPSpec: {
	// Routes defines the list of routes.
	routes: [...#RouteTCP] @go(Routes,[]RouteTCP)

	// EntryPoints defines the list of entry point names to bind to.
	// Entry points have to be configured in the static configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/entrypoints/
	// Default: all.
	entryPoints?: [...string] @go(EntryPoints,[]string)

	// TLS defines the TLS configuration on a layer 4 / TCP Route.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls_1
	tls?: null | #TLSTCP @go(TLS,*TLSTCP)
}

// RouteTCP holds the TCP route configuration.
#RouteTCP: {
	// Match defines the router's rule.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#rule_1
	match: string @go(Match)

	// Priority defines the router's priority.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#priority_1
	priority?: int @go(Priority)

	// Services defines the list of TCP services.
	services?: [...#ServiceTCP] @go(Services,[]ServiceTCP)

	// Middlewares defines the list of references to MiddlewareTCP resources.
	middlewares?: [...#ObjectReference] @go(Middlewares,[]ObjectReference)
}

// TLSTCP holds the TLS configuration for an IngressRouteTCP.
// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls_1
#TLSTCP: {
	// SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
	secretName?: string @go(SecretName)

	// Passthrough defines whether a TLS router will terminate the TLS connection.
	passthrough?: bool @go(Passthrough)

	// Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
	// If not defined, the `default` TLSOption is used.
	// More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
	options?: null | #ObjectReference @go(Options,*ObjectReference)

	// Store defines the reference to the TLSStore, that will be used to store certificates.
	// Please note that only `default` TLSStore can be used.
	store?: null | #ObjectReference @go(Store,*ObjectReference)

	// CertResolver defines the name of the certificate resolver to use.
	// Cert resolvers have to be configured in the static configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/https/acme/#certificate-resolvers
	certResolver?: string @go(CertResolver)

	// Domains defines the list of domains that will be used to issue certificates.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#domains
	domains?: [...types.#Domain] @go(Domains,[]types.Domain)
}

// ServiceTCP defines an upstream TCP service to proxy traffic to.
#ServiceTCP: {
	// Name defines the name of the referenced Kubernetes Service.
	name: string @go(Name)

	// Namespace defines the namespace of the referenced Kubernetes Service.
	namespace?: string @go(Namespace)

	// Port defines the port of a Kubernetes Service.
	// This can be a reference to a named port.
	port: intstr.#IntOrString @go(Port)

	// Weight defines the weight used when balancing requests between multiple Kubernetes Service.
	weight?: null | int @go(Weight,*int)

	// TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
	// it has closed the writing capability of its connection, to close the reading capability as well,
	// hence fully terminating the connection.
	// It is a duration in milliseconds, defaulting to 100.
	// A negative value means an infinite deadline (i.e. the reading capability is never closed).
	terminationDelay?: null | int @go(TerminationDelay,*int)

	// ProxyProtocol defines the PROXY protocol configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/services/#proxy-protocol
	proxyProtocol?: null | dynamic.#ProxyProtocol @go(ProxyProtocol,*dynamic.ProxyProtocol)
}

// IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
#IngressRouteTCP: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta   @go(ObjectMeta)
	spec:     #IngressRouteTCPSpec @go(Spec)
}

// IngressRouteTCPList is a collection of IngressRouteTCP.
#IngressRouteTCPList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of IngressRouteTCP.
	items: [...#IngressRouteTCP] @go(Items,[]IngressRouteTCP)
}
