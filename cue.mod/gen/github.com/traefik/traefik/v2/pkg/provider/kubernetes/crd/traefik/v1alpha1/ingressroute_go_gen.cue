// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1

package v1alpha1

import (
	"github.com/traefik/traefik/v2/pkg/types"
	"github.com/traefik/traefik/v2/pkg/config/dynamic"
	"k8s.io/apimachinery/pkg/util/intstr"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IngressRouteSpec defines the desired state of IngressRoute.
#IngressRouteSpec: {
	// Routes defines the list of routes.
	routes: [...#Route] @go(Routes,[]Route)

	// EntryPoints defines the list of entry point names to bind to.
	// Entry points have to be configured in the static configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/entrypoints/
	// Default: all.
	entryPoints?: [...string] @go(EntryPoints,[]string)

	// TLS defines the TLS configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls
	tls?: null | #TLS @go(TLS,*TLS)
}

// Route holds the HTTP route configuration.
#Route: {
	// Match defines the router's rule.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#rule
	match: string @go(Match)

	// Kind defines the kind of the route.
	// Rule is the only supported kind.
	// +kubebuilder:validation:Enum=Rule
	kind: string @go(Kind)

	// Priority defines the router's priority.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#priority
	priority?: int @go(Priority)

	// Services defines the list of Service.
	// It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
	services?: [...#Service] @go(Services,[]Service)

	// Middlewares defines the list of references to Middleware resources.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-middleware
	middlewares?: [...#MiddlewareRef] @go(Middlewares,[]MiddlewareRef)
}

// TLS holds the TLS configuration.
// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#tls
#TLS: {
	// SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
	secretName?: string @go(SecretName)

	// Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
	// If not defined, the `default` TLSOption is used.
	// More info: https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options
	options?: null | #TLSOptionRef @go(Options,*TLSOptionRef)

	// Store defines the reference to the TLSStore, that will be used to store certificates.
	// Please note that only `default` TLSStore can be used.
	store?: null | #TLSStoreRef @go(Store,*TLSStoreRef)

	// CertResolver defines the name of the certificate resolver to use.
	// Cert resolvers have to be configured in the static configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/https/acme/#certificate-resolvers
	certResolver?: string @go(CertResolver)

	// Domains defines the list of domains that will be used to issue certificates.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/routers/#domains
	domains?: [...types.#Domain] @go(Domains,[]types.Domain)
}

// TLSOptionRef is a reference to a TLSOption resource.
#TLSOptionRef: {
	// Name defines the name of the referenced TLSOption.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsoption
	name: string @go(Name)

	// Namespace defines the namespace of the referenced TLSOption.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsoption
	namespace?: string @go(Namespace)
}

// TLSStoreRef is a reference to a TLSStore resource.
#TLSStoreRef: {
	// Name defines the name of the referenced TLSStore.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsstore
	name: string @go(Name)

	// Namespace defines the namespace of the referenced TLSStore.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/providers/kubernetes-crd/#kind-tlsstore
	namespace?: string @go(Namespace)
}

// LoadBalancerSpec defines the desired state of LoadBalancer.
// It can reference either a Kubernetes Service object (a load-balancer of servers),
// or a TraefikService object (a load-balancer of Traefik services).
#LoadBalancerSpec: {
	// Name defines the name of the referenced Kubernetes Service or TraefikService.
	// The differentiation between the two is specified in the Kind field.
	name: string @go(Name)

	// Kind defines the kind of the Service.
	// +kubebuilder:validation:Enum=Service;TraefikService
	kind?: string @go(Kind)

	// Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
	namespace?: string @go(Namespace)

	// Sticky defines the sticky sessions configuration.
	// More info: https://doc.traefik.io/traefik/v2.9/routing/services/#sticky-sessions
	sticky?: null | dynamic.#Sticky @go(Sticky,*dynamic.Sticky)

	// Port defines the port of a Kubernetes Service.
	// This can be a reference to a named port.
	port?: intstr.#IntOrString @go(Port)

	// Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
	// It defaults to https when Kubernetes Service port is 443, http otherwise.
	scheme?: string @go(Scheme)

	// Strategy defines the load balancing strategy between the servers.
	// RoundRobin is the only supported value at the moment.
	strategy?: string @go(Strategy)

	// PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
	// By default, passHostHeader is true.
	passHostHeader?: null | bool @go(PassHostHeader,*bool)

	// ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
	responseForwarding?: null | dynamic.#ResponseForwarding @go(ResponseForwarding,*dynamic.ResponseForwarding)

	// ServersTransport defines the name of ServersTransport resource to use.
	// It allows to configure the transport between Traefik and your servers.
	// Can only be used on a Kubernetes Service.
	serversTransport?: string @go(ServersTransport)

	// Weight defines the weight and should only be specified when Name references a TraefikService object
	// (and to be precise, one that embeds a Weighted Round Robin).
	weight?: null | int @go(Weight,*int)
}

// Service defines an upstream HTTP service to proxy traffic to.
#Service: {
	#LoadBalancerSpec
}

// MiddlewareRef is a reference to a Middleware resource.
#MiddlewareRef: {
	// Name defines the name of the referenced Middleware resource.
	name: string @go(Name)

	// Namespace defines the namespace of the referenced Middleware resource.
	namespace?: string @go(Namespace)
}

// IngressRoute is the CRD implementation of a Traefik HTTP Router.
#IngressRoute: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ObjectMeta @go(ObjectMeta)
	spec:     #IngressRouteSpec  @go(Spec)
}

// IngressRouteList is a collection of IngressRoute.
#IngressRouteList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is the list of IngressRoute.
	items: [...#IngressRoute] @go(Items,[]IngressRoute)
}
