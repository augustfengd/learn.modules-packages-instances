// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/traefik/traefik/v2/pkg/tls

package tls

import "github.com/traefik/traefik/v2/pkg/types"

_#certificateHeader: "-----BEGIN CERTIFICATE-----\n"

// ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.
#ClientAuth: {
	caFiles?: [...#FileOrContent] @go(CAFiles,[]FileOrContent) @toml(caFiles,omitempty)

	// ClientAuthType defines the client authentication type to apply.
	// The available values are: "NoClientCert", "RequestClientCert", "VerifyClientCertIfGiven" and "RequireAndVerifyClientCert".
	clientAuthType?: string @go(ClientAuthType) @toml(clientAuthType,omitempty)
}

// Options configures TLS for an entry point.
#Options: {
	minVersion?: string @go(MinVersion) @toml(minVersion,omitempty)
	maxVersion?: string @go(MaxVersion) @toml(maxVersion,omitempty)
	cipherSuites?: [...string] @go(CipherSuites,[]string) @toml(cipherSuites,omitempty)
	curvePreferences?: [...string] @go(CurvePreferences,[]string) @toml(curvePreferences,omitempty)
	clientAuth?:               #ClientAuth @go(ClientAuth) @toml(clientAuth,omitempty)
	sniStrict?:                bool        @go(SniStrict) @toml(sniStrict,omitempty)
	preferServerCipherSuites?: bool        @go(PreferServerCipherSuites) @toml(preferServerCipherSuites,omitempty)
	alpnProtocols?: [...string] @go(ALPNProtocols,[]string) @toml(alpnProtocols,omitempty)
}

// Store holds the options for a given Store.
#Store: {
	defaultCertificate?:   null | #Certificate   @go(DefaultCertificate,*Certificate) @toml(defaultCertificate,omitempty)
	defaultGeneratedCert?: null | #GeneratedCert @go(DefaultGeneratedCert,*GeneratedCert) @toml(defaultGeneratedCert,omitempty)
}

// GeneratedCert defines the default generated certificate configuration.
#GeneratedCert: {
	// Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
	resolver?: string @go(Resolver) @toml(resolver,omitempty)

	// Domain is the domain definition for the DefaultCertificate.
	domain?: null | types.#Domain @go(Domain,*types.Domain) @toml(domain,omitempty)
}

// CertAndStores allows mapping a TLS certificate to a list of entry points.
#CertAndStores: {
	#Certificate
	stores?: [...string] @go(Stores,[]string) @toml(stores,omitempty)
}
